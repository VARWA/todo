name: Flutter CI

# This workflow is triggered on pushes to the repository.

on:
  push:
    branches:
      - homework_4

jobs:
  analyze:
    name: Run analyzer and formatter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json
      - name: Decode firebase_option
        env:
          firebase_options_dart: ${{secrets.FIREBASE_OPTIONS}}
        run: echo "$firebase_options_dart" > lib/firebase_options.dart
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.5'
          cache: true
      - run: |
          echo "${{ secrets.ENV }}" > .env
      - run: flutter pub get
      - run: flutter analyze
      - run: dart format lib/firebase_options.dart # unknown error for generated file
      - run: dart format --set-exit-if-changed .
  build_ios:
    name: Build app (IOS)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Decode firebase_app_id_file.json
        env:
          FIREBASE_APP_ID_FILE_JSON: ${{ secrets.FIREBASE_APP_ID_FILE_JSON }}
        run: echo "$FIREBASE_APP_ID_FILE_JSON" > ios/firebase_app_id_file.json
      - name: Decode GoogleService-Info.plist
        env:
          GOOGLESERVICE_INFO_PLIST: ${{ secrets.GOOGLESERVICE_INFO_PLIST }}
        run: echo "$GOOGLESERVICE_INFO_PLIST" > ios/Runner/GoogleService-Info.plist
      - name: Decode firebase_option
        env:
          firebase_options_dart: ${{secrets.FIREBASE_OPTIONS}}
        run: echo "$firebase_options_dart" > lib/firebase_options.dart
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.10.5'
      - run: |
          echo "${{ secrets.ENV }}" > .env
      - run: flutter build ios --no-codesign
  build_android:
    name: Build app (Android)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '11'
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json
      - name: Decode firebase_option
        env:
          firebase_options_dart: ${{secrets.FIREBASE_OPTIONS}}
        run: echo "$firebase_options_dart" > lib/firebase_options.dart
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.10.5'
          cache: true
      - run: |
          echo "${{ secrets.ENV }}" > .env
      - run: flutter build apk --flavor dev
  ios:
    name: Integration test (IOS)
    strategy:
      matrix:
        device:
          - "iPhone 11 Simulator (15.2)"
      fail-fast: true
    runs-on: macos-11 # or macos-latest if you prefer, but be aware that the available simulators could be different if you run a different version
    steps:
      - name: "List all simulators"
        run: "xcrun xctrace list devices"
      - name: "Start Simulator"
        run: |
          UDID=$(xcrun xctrace list devices | grep "^${{ matrix.device }}" | awk '{gsub(/[()]/,""); print $NF}')
          echo $UDID
          xcrun simctl boot "${UDID:?No Simulator with this name found}"
      - uses: actions/checkout@v3
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.10.5'
          cache: true
      - run: |
          echo "${{ secrets.ENV }}" > .env
      - name: Decode firebase_app_id_file.json
        env:
          FIREBASE_APP_ID_FILE_JSON: ${{ secrets.FIREBASE_APP_ID_FILE_JSON }}
        run: echo "$FIREBASE_APP_ID_FILE_JSON" > ios/firebase_app_id_file.json
      - name: Decode GoogleService-Info.plist
        env:
          GOOGLESERVICE_INFO_PLIST: ${{ secrets.GOOGLESERVICE_INFO_PLIST }}
        run: echo "$GOOGLESERVICE_INFO_PLIST" > ios/Runner/GoogleService-Info.plist
      - name: Decode firebase_option
        env:
          firebase_options_dart: ${{secrets.FIREBASE_OPTIONS}}
        run: echo "$firebase_options_dart" > lib/firebase_options.dart
      - name: Install Flutter dependencies
        run: flutter pub get
      - name: Run integration tests
        run: flutter test integration_test --verbose
  build:
    name: Distribution to Firebase
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v2
        with:
          distribution: "zulu"
          java-version: "11"
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo "$GOOGLE_SERVICES_JSON" > android/app/google-services.json
      - name: Decode firebase_option
        env:
          firebase_options_dart: ${{secrets.FIREBASE_OPTIONS}}
        run: echo "$firebase_options_dart" > lib/firebase_options.dart
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.10.5'
          cache: true
      - run: |
          echo "${{ secrets.ENV }}" > .env
      - uses: subosito/flutter-action@v2
        with:
          channel: "stable"
      - run: flutter pub get
      - run: flutter build apk --flavor dev
      - uses: actions/upload-artifact@v1
        with:
          name: app-dev-release
          path: build/app/outputs/apk/dev/release/app-dev-release.apk
      - name: upload artifact to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{secrets.APPID_ANDROID}}
          token: ${{secrets.TOKEN}}
          groups: testers
          file: build/app/outputs/apk/dev/release/app-dev-release.apk
#  android:
#    name: Integration test (Andriod)
#    runs-on: macos-11
#    strategy:
#      matrix:
#        api-level:
#          - 29
#          # you can add more API level if you want to run your tests on different API
#      fail-fast: true
#    steps:
#      - uses: actions/checkout@v3
#      - name: Setup Flutter SDK
#        uses: subosito/flutter-action@v2
#        with:
#          channel: 'stable'
#          flutter-version: '3.10.5'
#          cache: true
#      - run: |
#          echo "${{ secrets.ENV }}" > .env
#      - name: Install Flutter dependencies
#        run: flutter pub get
#      - name: Run integration tests
#        # more info on https://github.com/ReactiveCircus/android-emulator-runner
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: ${{ matrix.api-level }}
#          arch: x86_64
#          profile: Nexus 6
#          script: flutter test integration_test --verbose